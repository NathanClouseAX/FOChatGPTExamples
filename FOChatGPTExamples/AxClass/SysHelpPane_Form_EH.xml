<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysHelpPane_Form_EH</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ChatGPTWrapper.ChatGPTClient;
using ChatGPTWrapper.AssistantGPTClient;

internal final class SysHelpPane_Form_EH
{
 
    

    
    


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AssistanceSubmit_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(SysHelpPane, AssistanceSubmit), FormControlEventType::Clicked)]
    public static void AssistanceSubmit_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        SystemParameters SystemParameters = SystemParameters::find();

        FormRun formRun = sender.formRun();
        FormStringControl prompt = formRun.control(formRun.controlId("AssistancePrompt"));
        FormStringControl result = formRun.control(formRun.controlId("AssistanceResult"));

        if(SystemParameters.ChatGPTAPIUseAPI == NoYes::Yes)
        {
      
            ChatGPTWrapper.ChatGPTClient gtpClient = new ChatGPTWrapper.ChatGPTClient();

            gtpClient.SetApiKey(SystemParameters.ChatGPTAPIKey);
            gtpClient.SetBaseURL(SystemParameters.ChatGPTAPIBaseURL);
            gtpClient.SetModel(SystemParameters.ChatGPTAPIModel);
            gtpClient.SetPrePrompt(SystemParameters.ChatGPTAPIPrePrompt);
            if(SystemParameters.ChatGPTAPIProvideContextInfo)
            {
                gtpClient.PrependContext(ChatGPTAPIContextMessageHelper::contextMessageGPT());
            }

            str gtpResult = gtpClient.SendMessageAsync(prompt.text());

            result.text(gtpResult);
        }
        else if(SystemParameters.AssistantGPTAPIUseAPI == NoYes::Yes)
        {
            ChatGPTWrapper.AssistantGPTClient assistantClient = new ChatGPTWrapper.AssistantGPTClient();

            assistantClient.SetApiKey(SystemParameters.AssistantGPTAPIKey);
            assistantClient.SetBaseURL(SystemParameters.AssistantGPTAPIBaseURL);
            assistantClient.SetAssistantId(SystemParameters.AssistantGPTAPIAssistantId);
            if(SystemParameters.AssistantGPTAPIPrePrompt != "")
            {
                assistantClient.SetPrePrompt(SystemParameters.AssistantGPTAPIPrePrompt);
            }
            if(SystemParameters.AssistantGPTAPIProvideContextInfo)
            {
                assistantClient.PrependContext(ChatGPTAPIContextMessageHelper::contextMessageAssistantGPT());
            }

            str assistantResult = assistantClient.SendMessageAsync(prompt.text());

            result.text(assistantResult);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysHelpPane_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// enable Tab for AI help when any AI help system is enabled
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(SysHelpPane), FormEventType::Initialized)]
    public static void SysHelpPane_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        SystemParameters SystemParameters = SystemParameters::find();

        //FormRun formRun = sender.form()
        
        FormTabPageControl ChatGPTAssistant = sender.control(sender.controlId("ChatGPTAssistant"));

        if(SystemParameters.ChatGPTAPIUseAPI || SystemParameters.AssistantGPTAPIUseAPI)
        {
            if(ChatGPTAssistant)
            {
                ChatGPTAssistant.visible(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>